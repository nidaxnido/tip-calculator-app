import Head from 'next/head'
import Image from 'next/image'
import { Space_Mono } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import {Center, Flex, Box, Text, InputGroup, Input, Spacer, InputLeftElement, SimpleGrid, VStack, Button, GridItem} from '@chakra-ui/react'
import {FaUser} from 'react-icons/fa'
import { use, useState } from 'react'
import Section from '@/ui/Section'
import Inputs from '@/ui/Inputs'

const space = Space_Mono({weight:'700', subsets: ['latin'] });

const PercentBox = ({value, handle, isActive}) =>{
    return <Box as='button' 
            bg={isActive? "brand.liteGreyCyan":"brand.darkCyan"} 
            fontSize={27} textAlign='center' borderRadius={10} py='10px'
            color={isActive? "brand.darkCyan":"white"}
            _hover={{bg:"brand.liteGreyCyan", color:"brand.darkCyan"}} 
            onClick={handle}>{value}</Box>
  }

export default function Cek(){
    const [bill, setBill] = useState('')
    const [nop, setNop] = useState('')
    const [tip, setTip] = useState(0)
    const tipAmount = (bill !== 0 && nop !== 0 && nop != '' && tip !== 0)?  (tip * bill / nop).toFixed(2): 0.00;
    const total = (tipAmount !== 0)?  ((parseFloat(bill)+(tip * bill))/nop).toFixed(2) : 0.00;
    const [isWrong, setIsWrong] = useState(false);
    // const isWrong = (nop !== 0 && nop !== '')? false:true;
    const msg = (isWrong) ? "Can't be zero" : "";
    function calc(tips){
        if(nop == 0){
            console.log(nop)
            console.log((nop == 0))
            setIsWrong(true);
        }
        setTip(parseFloat(tips/100));
        
    }
        function doReset(){
        setBill('')
        setNop('')
        setTip(null)
        setIsWrong(false)
        console.log(msg)
        }
        function changeNop(x){
            setNop(x)
            setIsWrong(false)
            console.log(msg)
        }
    return (
        <>
        <Head>
            <title>Tip Calculator App</title>
            <meta name="description" content="Generated by Nida Nido" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Box className={space.className} bg="brand.liteGreyCyan" 
                display={{sm:'flex'}} 
                flexFlow={{sm:'column nowrap'}} 
                justifyContent={{sm:'center'}} 
                alignItems={{sm:'center'}}
                h={{sm:'100vh'}} >
            <Flex fontSize='25px' letterSpacing='10px' flexDir='column' justifyContent='center' alignItems='center' h='15vh'>
                <Text>SPLI</Text>
                <Text>TTER</Text>
            </Flex>
            <Flex flexFlow={{base:'column nowrap', sm:'row nowrap'}} 
                    maxW={{sm:"1080px"}}
                    bg='white'  borderRadius={25} p='25px'>
                <VStack p='25px' color='brand.darkGreyCyan' gap='25px' flexBasis={{sm:'540px'}} >
                    <Section title="Bill">
                        <Inputs ikon="$" handleChange={(e)=>{setBill(e.target.value)}} value={bill} isZero={false} />
                    </Section>
                    <Section title="Select Tip %">
                        <SimpleGrid columns={{base:2, sm:3}} spacing='10px' color='white'>
                            <PercentBox handle={(e) =>{calc(5)}} value="5%" isActive={tip == parseFloat(5/100)} />
                            <PercentBox handle={(e) =>{calc(10)}} value="10%" isActive={tip == parseFloat(10/100)} />
                            <PercentBox handle={(e) =>{calc(15)}} value="15%" isActive={tip == parseFloat(15/100)} />
                            <PercentBox handle={(e) =>{calc(25)}} value="25%" isActive={tip == parseFloat(25/100)} />
                            <PercentBox handle={(e) =>{calc(50)}} value="50%" isActive={tip == parseFloat(50/100)} />
                            <Input placeholder='Custom' bg="brand.paleGreyCyan" 
                                fontSize={27} textAlign='center' borderRadius={10} py='10px'
                                color="brand.darkCyan"
                                h='60px'
                                type='number'
                                _active={{color:"brand.darkCyan"}}
                                onChange={(e)=>{setTip(parseFloat(e.target.value/100))}}
                                />
                            {/* <PercentBox value="Custom" /> */}
                        </SimpleGrid>
                    </Section>
                    <Section title="Number of People" errMsg={msg}>
                        <Inputs ikon={<FaUser />} handleChange={(e)=>changeNop(e.target.value)} value={nop} isZero={isWrong} />
                    </Section>
                </VStack>
                <VStack  bg='brand.darkCyan' borderRadius={25} p={{base:25, sm:50}} 
                justifyContent='left' alignItems='left'
                flexBasis={{sm:'540px'}}
                gap={{sm:50}}
                >
                    <Flex justifyContent='space-between'>
                        <Box>
                            <Text color='white'>Tip Amount</Text>
                            <Text color='brand.greyCyan'>/ person</Text>
                        </Box>
                        <Text fontSize="45px" lineHeight="45px"  color='brand.cyan'>${tipAmount}</Text>
                    </Flex>
                    <Flex  bg="brand.darkCyan" justifyContent='space-between'>
                        <Box>
                            <Text color='white'>Total</Text>
                            <Text color='brand.greyCyan'>/ person</Text>
                        </Box>
                        <Text fontSize="45px" lineHeight="45px" color='brand.cyan'>${total}</Text>
                    </Flex>
                    <Spacer />
                    <Button color="brand.darkCyan" bg="brand.cyan" 
                            w="100%" fontSize="24px" height="60px"
                            _hover={{bg:"brand.lightGreyCyan"}}
                            onClick={()=>doReset()}>RESET</Button>
                </VStack>
            </Flex>
        </Box>
        </>
    )
}
